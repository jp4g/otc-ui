const format = (value: unknown) => (value ?? '').toString()

type Formatter = (value: unknown) => string

type ColorMap = Record<string, Formatter>

const identity: Formatter = (value) => format(value)

const sharedColors: ColorMap = {
  reset: identity,
  bold: identity,
  dim: identity,
  italic: identity,
  underline: identity,
  inverse: identity,
  hidden: identity,
  strikethrough: identity,
  black: identity,
  red: identity,
  green: identity,
  yellow: identity,
  blue: identity,
  magenta: identity,
  cyan: identity,
  white: identity,
  gray: identity,
  bgBlack: identity,
  bgRed: identity,
  bgGreen: identity,
  bgYellow: identity,
  bgBlue: identity,
  bgMagenta: identity,
  bgCyan: identity,
  bgWhite: identity,
  blackBright: identity,
  redBright: identity,
  greenBright: identity,
  yellowBright: identity,
  blueBright: identity,
  magentaBright: identity,
  cyanBright: identity,
  whiteBright: identity,
  bgBlackBright: identity,
  bgRedBright: identity,
  bgGreenBright: identity,
  bgYellowBright: identity,
  bgBlueBright: identity,
  bgMagentaBright: identity,
  bgCyanBright: identity,
  bgWhiteBright: identity,
}

export const isColorSupported = false

export const createColors = () => ({ ...sharedColors })

export const {
  reset,
  bold,
  dim,
  italic,
  underline,
  inverse,
  hidden,
  strikethrough,
  black,
  red,
  green,
  yellow,
  blue,
  magenta,
  cyan,
  white,
  gray,
  bgBlack,
  bgRed,
  bgGreen,
  bgYellow,
  bgBlue,
  bgMagenta,
  bgCyan,
  bgWhite,
  blackBright,
  redBright,
  greenBright,
  yellowBright,
  blueBright,
  magentaBright,
  cyanBright,
  whiteBright,
  bgBlackBright,
  bgRedBright,
  bgGreenBright,
  bgYellowBright,
  bgBlueBright,
  bgMagentaBright,
  bgCyanBright,
  bgWhiteBright,
} = sharedColors

export default sharedColors
